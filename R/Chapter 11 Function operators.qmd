---
title: "Chapter 11 Function operators"
author: "Yang Hu"
format: 
    html:
      self-contained: true
      embed-resources: true

number-sections: false
code-annotations: hover
    
toc: true
toc-title: "Contents"
toc-location: "left"
toc-depth: 4

execute: 
  freeze: auto
  warning: true
---


## Introduction

In this chapter, you’ll learn about function operators. A **function operator** is a function that takes one (or more) functions as input and returns a function as output. 

The following code shows a simple function operator, `chatty()`. It wraps a function, making a new function that prints out its first argument. You might create a function like this because it gives you a window to see how functionals, like `map_int()`, work.

```{r}
chatty <- function(f) {
  force(f)
  
  function(x, ...) {
    res <- f(x, ...)
    cat("Processing ", x, "\n", sep = "")
    res
  }
}

f <- function(x) x ^ 2

s <- c(3, 2, 1)

purrr::map_dbl(s, chatty(f))
```

Function operators are closely related to function factories; indeed they’re just a function factory that takes a function as input. Like factories, there’s nothing you can’t do without them, but they often allow you to factor out complexity in order to make your code more readable and reusable.

Function operators are typically paired with functionals. **If you’re using a for-loop, there’s rarely a reason to use a function operator, as it will make your code more complex for little gain.**

If you’re familiar with Python, decorators is just another name for function operators.


```{r}
library(purrr)
library(memoise)
```


## Existing function operators

There are two very useful function operators that will both help you solve common recurring problems, and give you a sense for what function operators can do: `purrr::safely()` and `memoise::memoise()`.


## Capturing errors with `purrr::safely()`

One advantage of for-loops is that if one of the iterations fails, you can still access all the results up to the failure:

```{r}
#| eval: false


x <- list(
  1:3,
  3:5,
  5:8,
  "Yang"
)

out <- rep(NA_real_, length(x))

for (i in seq_along(x)) {
  out[[i]] <- sum(x[[i]])
}

out
```

If you do the same thing with a functional, you get no output, making it hard to figure out where the problem lies:

```{r}
# map_dbl(x. sum)


# My fix:

map_dbl(x, \(.x){
  
  if (is.numeric(.x)) {
    sum(.x)
  } else {
    NA
  }
})
```


`purrr::safely()` provides a tool to help with this problem. `safely()` is a function operator that transforms a function to turn errors into data. (You can learn the basic idea that makes it work in Section 8.6.2.) Let’s start by taking a look at it outside of `map_dbl()`:

```{r}
safe_sum <- safely(sum)
safe_sum
```

Like all function operators, `safely()` takes a function and returns a wrapped function which we can call as usual:

```{r}
#| eval: false

sum(c(1:4, NA, "Yang"))

safe_sum(c(1:4, NA, "Yang"))

str(safe_sum(x[[1]]))

str(safe_sum(x[[4]]))
```

You can see that a function transformed by `safely()` always returns a list with two elements, `result` and `error`. If the function runs successfully, `error` is `NULL` and `result` contains the result; if the function fails, `result` is `NULL` and `error` contains the error.

Now lets use `safely()` with a functional:

```{r}
out <- map(x, safely(sum))

str(out)
```

The output is in a slightly inconvenient form, since we have four lists, each of which is a list containing the result and the error. We can make the output easier to use by turning it “inside-out” with `purrr::transpose()`, so that we get a list of `results` and a list of `errors`:

```{r}
out <- transpose(map(x, safely(sum)))

str(out)
```

Now we can easily find the results that worked, or the inputs that failed:

```{r}
ok <- map_lgl(out$error, is.null)

ok

x[!ok]

out$result[ok]
```

You can use this same technique in many different situations. For example, imagine you’re fitting a generalised linear model (GLM) to a list of data frames. GLMs can sometimes fail because of optimisation problems, but you still want to be able to try to fit all the models, and later look back at those that failed:

```{r}
#| eval: false

fit_model <- function(df) {
  glm(y ~ x1 + x2 * x3, data = df)
}

models <- transpose(map(datasets, safely(fit_model)))
ok <- map_lgl(models$error, is.null)

# which data failed to converge?
datasets[!ok]

# which models were successful?
models[ok]
```


I think this is a great example of the power of combining functionals and function operators: `safely()` lets you succinctly express what you need to solve a common data analysis problem.

purrr comes with three other function operators in a similar vein:

`possibly()`: returns a default value when there’s an error. It provides no way to tell if an error occured or not, so it’s best reserved for cases when there’s some obvious sentinel value (like `NA`).

`quietly()`: turns output, messages, and warning side-effects into `output`, `message`, and `warning` components of the output.

`auto_browser()`: automatically executes `browser()` inside the function when there’s an error.

See their documentation for more details.



### Caching computations with `memoise::memoise()`

Another handy function operator is `memoise::memoise()`. It **memoises** a function, meaning that the function will remember previous inputs and return cached results. Memoisation is an example of the classic computer science tradeoff of memory versus speed. A memoised function can run much faster, but because it stores all of the previous inputs and outputs, it uses more memory.

Let’s explore this idea with a toy function that simulates an expensive operation:

```{r}
slow_function <- function(x) {
  Sys.sleep(1)
  x * 10 * runif(1)
}


system.time(print(slow_function(1)))


system.time(print(slow_function(1)))

```

When we memoise this function, it’s slow when we call it with new arguments. But when we call it with arguments that it’s seen before it’s instantaneous: it retrieves the previous value of the computation.

```{r}
fast_function <- memoise::memoise(slow_function)

system.time(print(fast_function(1)))

system.time(print(fast_function(1)))

```

This (the Fibonacci series - not included in the note) is an example of **dynamic programming**, where a complex problem can be broken down into many overlapping subproblems, and remembering the results of a subproblem considerably improves performance.

Think carefully before memoising a function. If the function is not **pure**, i.e. the output does not depend only on the input, you will get misleading and confusing results. I created a subtle bug in devtools because I memoised the results of available.packages(), which is rather slow because it has to download a large file from CRAN. The available packages don’t change that frequently, but if you have an R process that’s been running for a few days, the changes can become important, and because the problem only arose in long-running R processes, the bug was very painful to find.

(Skip the case study).
