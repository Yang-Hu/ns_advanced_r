---
title: "Chapter 18 Expressions (metaprogramming)"
author: "Yang Hu"
format: 
    html:
      self-contained: true
      embed-resources: true

number-sections: false
code-annotations: hover
    
toc: true
toc-title: "Contents"
toc-location: "left"
toc-depth: 4

execute: 
  freeze: auto
  warning: true
---

## Introduction

To compute on the language, we first need to understand its structure. **That requires some new vocabulary, some new tools, and some new ways of thinking about R code.**

The first of these is the distinction between an operation and its result. Take the following code, which multiplies a variable `x` by 10 and saves the result to a new variable called `y`. It doesn’t work because we haven’t defined a variable called `x`:

```{r}
#| eval: false

y <- x  * 10
```

It would be nice if we could **capture the intent of the code without executing it**. In other words, **how can we separate our description of the action from the action itself**?

One way is to use `rlang::expr()`:

```{r}
z <- rlang::expr(y <- x * 10)

typeof(z)
```

`expr()` returns an expression, an object that captures the structure of the code without evaluating it (i.e. running it). If you have an expression, you can evaluate it with `base::eval()`:

```{r}
x <- 1

eval(z)
```

The focus of this chapter is the data structures that underlie expressions. Mastering this knowledge will allow you to inspect and modify captured code, and to generate code with code. We’ll come back to `expr()` in Chapter 19, and to `eval()` in Chapter 20.


```{r}
library(rlang)
library(lobstr)
```


## Abstract syntax trees

Expressions are also called **abstract syntax trees** (ASTs 抽象语法树) because the structure of code is hierarchical and can be naturally represented as a tree. **Understanding this tree structure is crucial for inspecting and modifying expressions (i.e. metaprogramming).**


### Drawing

We’ll start by introducing some conventions for drawing ASTs, beginning with a simple call that shows their main components: f(x, "y", 1). I’ll draw trees in two ways:

- By "hand" (i.e. with OmniGraffle):

![](../pic/simple.png){fig-align=center width=65%}

<!-- Note how to find the picture if the .qmd file is in a sub folder -->



- With `lobstr::ast()`:

```{r}
expr(f(x, "y", 1)) |> lobstr::ast()

# or:
lobstr::ast(f(x, "y", 1))
```

Both approaches share conventions as much as possible:

- The leaves of the tree are either **symbols**, like `f` and `x`, or **constants**, like `1` or `"y"`. Symbols are drawn in purple and have rounded corners. Constants have black borders and square corners. Strings and symbols are easily confused, so strings are always surrounded in quotes.

- The branches of the tree are call objects, which represent function calls, and are drawn as orange rectangles. The first child (`f`) is the function that gets called; the second and subsequent children (`x`, `"y"`, and `1`) are the arguments to that function.

Colours will be shown when you call `ast()`, but do not appear in the book for complicated technical reasons.

The above example only contained one function call, making for a very shallow tree. Most expressions will contain considerably more calls, creating trees with multiple levels. For example, consider the AST for `f(g(1, 2), h(3, 4, i()))`:


![](pic/complicated.png){fig-align=center width=65%}

```{r}
lobstr::ast(f(g(1, 2), h(3, 4, i())))
```

You can read the hand-drawn diagrams from left-to-right (ignoring vertical position), and the lobstr-drawn diagrams from top-to-bottom (ignoring horizontal position). The depth within the tree is determined by the nesting of function calls. This also determines evaluation order, as evaluation generally proceeds from deepest-to-shallowest, but this is not guaranteed because of lazy evaluation (Section 6.5). Also note the appearance of `i()`, a function call with no arguments; it’s a branch with a single (symbol) leaf.


### Non-code components

You might have wondered what makes these *abstract syntax trees*. They are abstract because they only capture important structural details of the code, not whitespace or comments:

```{r}
ast(
  # Hey!
  f(x, y)
  )
```

There’s only one place where white space affects the AST:

```{r}
lobstr::ast(y -> x)

lobstr::ast(y <- x)

lobstr::ast(y < -x)
```


### Infix calls 

Every call in R can be written in tree form because any call can be written in prefix form (Section 6.8.1). Take `y <- x * 10` again: what are the functions that are being called? It is not as easy to spot as `f(x, 1)` because this expression contains two infix calls: `<-` and `*`. That means that these two lines of code are equivalent:

```{r}
y <- x * 10

# equal to:
`<-`(y, `*`(x, 10))

ast(y <- x * 10)

# And the AST is equal to:
ast(`<-`(y, `*`(x, 10)))
```

There really is no difference between the ASTs, and if you generate an expression with prefix calls, R will still print it in infix form:

```{r}
expr(`<-`(y, `*`(x, 10)))  # !!!

```

The order in which infix operators are applied is governed by a set of rules called operator precedence (运算符优先级), and we’ll use `lobstr::ast()` to explore them in Section 18.4.1.


### 18.2.4 Exercises

```{r}
ast(f(g(h())))

ast(+`+`(1, 2))  

ast(`+`(`+`(1, 2), 3)) 

# or
ast(1 + 2 + 3)

ast((x + y) * z)
```

```{r}
ast(f(g(h(i(1, 2, 3)))))
```

```{r}
ast(f(1, g(2, h(3, i()))))
```

```{r}
ast(f(g(1, 2), h(3, i(4, 5))))
```

```{r}
ast(
  if (FALSE) {
    1
  } else if (FALSE) {
    2
  } else if (TRUE) {
    3
  }
)
```
The AST of nested else if statements might look a bit confusing because it contains multiple curly braces. However, we can see that in the else part of the AST just another expression is being evaluated, which happens to be an if statement and so forth.


## Expressions

Collectively, the data structures present in the AST are called expressions. An **expression** is any member of the set of base types created by parsing code: constant scalars, symbols, call objects, and pairlists. These are the data structures used to represent captured code from `expr()`, and `is_expression(expr(...))` is always true.

Constants, symbols and call objects are the most important, and are discussed below. Pairlists and empty symbols are more specialised and we’ll come back to them in Sections 18.6.1 and Section 18.6.2.

NB: In base R documentation “expression” is used to mean two things. As well as the definition above, expression is also used to refer to the type of object returned by expression() and parse(), which are basically lists of expressions as defined above. In this book I’ll call these **expression vectors**, and I’ll come back to them in Section 18.6.3.


### Constants

Scalar constants are the simplest component of the AST. More precisely, a **constant** is either `NULL` or a length-1 atomic vector (or scalar, Section 3.2.1) like `TRUE`, `1L`, `2.5` or `"x"`. You can test for a constant with `rlang::is_syntactic_literal()`.

```{r}
for_test <- list(TRUE, 1L, 2.5, "x")

purrr::map(for_test, \(.x){is_syntactic_literal(.x)})
```

Constants are self-quoting in the sense that the expression used to represent a constant is the same constant:

```{r}
identical(expr(TRUE), TRUE)

identical(expr(1), 1)

identical(expr(2L), 2L)

identical(expr("x"), "x")


# or:
purrr::map(for_test, \(.x){
  identical(expr(!!.x), .x)
})
```


### Symbols

A **symbol** represents the name of an object like `x`, `mtcars`, or `mean`. In base R, the terms symbol and name are used interchangeably (i.e. `is.name()` is identical to `is.symbol()`), but in this book I used symbol consistently because “name” has many other meanings.

You can create a symbol in two ways: by capturing code that references an object with `expr()`, or turning a string into a symbol with `rlang::sym()`:

```{r}
expr(x)

sym("x")
```

You can turn a symbol back into a string with `as.character()` or `rlang::as_string()`. `as_string()` has the advantage of clearly signalling that you’ll get a character vector of length 1.

```{r}
as_string(expr(x))
```

You can recognise a symbol because it’s printed without quotes, `str()` tells you that it’s a symbol, and `is.symbol()` is `TRUE`:

```{r}
str(expr(x))

is.symbol(expr(x))
```

The symbol type is not vectorised, i.e. a symbol is always length 1. If you want multiple symbols, you’ll need to put them in a list, using (e.g.) `rlang::syms()`.



### Calls

A **call** object represents a captured function call. Call objects are a special type of list where the first component specifies the function to call (usually a symbol), and the remaining elements are the arguments for that call. Call objects create branches in the AST, because calls can be nested inside other calls.

You can identify a call object when printed because it looks just like a function call. Confusingly `typeof()` and `str()` print “language” for call objects, but `is.call()` returns `TRUE`:

```{r}
#| eval: false

ast(read.table(file = "important.csv", row.names = FALSE))

x <- expr(read.table(file = "important.csv", row.names = FALSE))

typeof(x)

is.call(x)

call_standardise(x)

```

### Subsetting

**Calls generally behave like lists**, i.e. you can use standard subsetting tools. The first element of the call object is the function to call, which is usually a symbol:

```{r}
str(x)

x[[1]]

is.symbol(x[[1]])

# Arguments:
names(x)

# Elements (the first is the function to call, the rest are values for arguments):
lapply(1:length(x), \(.x) {x[[.x]]})

```

The remainder of the elements are the arguments:

```{r}
#| eval: false

as.list(x[-1])

```

You can extract individual arguments with `[[` or, if named, `$`:

```{r}
#| eval: false

x[[2]]

x$row.names
```

You can determine the number of arguments in a call object by subtracting 1 from its length:

```{r}
length(x) - 1


x <- expr(sum(1, 2, 3))

y <- expr(expr(sum(1, 2, 3))) 


x;y

length(x);length(y)

# The second `expr` is a list:
y[[2]][[1]]
```

Extracting specific arguments from calls is challenging because of R’s flexible rules for argument matching: it could potentially be in any location, with the full name, with an abbreviated name, or with no name. To work around this problem, you can use `rlang::call_standardise()` which standardises all arguments to use the full name:

```{r}
#| eval: false

x <- expr(mean(c(1, 2, 3), na.rm = TRUE))

eval(x)

call_standardise(x)

call_match(x(), x)


sample(x = 1:5, size = 3, replace = FALSE)


# Save the minimum function as expression:
x <- expr(sample(1:5, 3, FALSE))

# Standardises all arguments to use the full name:
call_standardise(x)

```


Look back, you have learnt a lot in 2023: Packages, Quarto document and slides, even got attention from RBNZ and MfE! Like Ollie said, you should be proud of yourself. Take some time off and have a good time with Lara and Eric(Fu). See you in 2024! :)

Hi! Thank you. I am back :). Today is 2024-05-07, it's been a while! We had a great trip to China and Japan. Shortly after I retuned, I had attend an R Shiny class, and I will be presenting at the R exchange 2024 in two days, wish me luck. 


**Calls can be modified in the same way as lists:**, can a list be transformed to a function call then?

```{r}
x <- list(x = 1:10, size = 5, replace = TRUE)

# ! Yes you can! do.call constructs and executes a function call from a name or a function and a list of arguments to be passed to it.
do.call(what = "sample", args = x)

# By position:
x <- list(1:10, 5, TRUE)

# It also works:
do.call(what = "sample", args = x)

# Add a new argument:
x <- list(x = 1:10, size = 5, replace = TRUE)

x[["prob"]] <- c(1, rep(0, times = 9))  # Give 1 the whole weight, the rest of 0 weight

# Yep, it works as expected:
do.call(what = "sample", args = x)
```


### Function position

The first element of the call object is the function position. This contains the function that will be called when the object is evaluated, and is usually a symbol:

```{r}
lobstr::ast(foo())
```

While R allows you to surround the name of the function with quotes, the parser converts it to a symbol:

However, sometimes the function doesn’t exist in the current environment and you need to do some computation to retrieve it: for example, if the function is in another package, is a method of an R6 object, or is created by a function factory. In this case, the function position will be occupied by another call:

```{r}
ast(pkg::foo(1))

ast(obj$foo(1))

ast(foo(1)(2))
```

### Constructing 

You can construct a call object from its components using `rlang::call2()`. The first argument is the name of the function to call (either as a string, a symbol, or another call). The remaining arguments will be passed along to the call:

```{r}
x <- 1:10

call2(.fn = "mean", x = expr(x), na.rm = TRUE)

call2(.fn = expr(base::mean), x = expr(x), na.rm = TRUE)

```

Infix calls created in this way still print as usual.

```{r}
call2(.fn = "<-", expr(x), 10)
```

Using `call2()` to create complex expressions is a bit clunky. You’ll learn another technique in Chapter 19.


### Summary

The following table summarises the appearance of the different expression subtypes in `str()` and `typeof()`:

|                   | `str()`                    | `typeof()`                               |
|-------------------|:---------------------------|:-----------------------------------------|
| Scalar constant   | `logi`/`int`/`num`/`chr`   | `logical`/`integer`/`double`/`character` | 
| Symbol            | `symbol`                   | `symbol`                                 |  
| Call object       | `language`                 | `language`                               |  
|Pairlist           | Dotted pair list           | `pairlist`                               |
|Expression vector  | `expression()`             | `expression`                             |

: Different expression subtypes in `str()` and `typeof()`


Both base R and rlang provide functions for testing for each type of input, although the types covered are slightly different. You can easily tell them apart because all the base functions start with `is.` and the rlang functions start with `is_`.

|                   | **Base**                   | **rlang**                |
|-------------------|:---------------------------|:-------------------------|
| Scalar constant   | ---                        | `is_syntactic_literal()` | 
| Symbol            | `is.symbol()`              | `is_symbol()`            |  
| Call object       | `is.call()`                | `is_call()`              |  
|Pairlist           | `is.pairlist()`            | `is_pairlist()`          |
|Expression vector  | `is.expression()`          | ---                      |


Let's see this example, pay attention to the details:

```{r}
# Original example function (it will run and return results):
purrr::map(1:3, \(.x){.x})

# This step capture the code, and won't return the results:
purrr::map(1:3, \(.x){.x}) |> expr()

# Save the expression (note that the argument need to be provided):
code <- purrr::map(.x = 1:3, .f = \(.x){.x}) |> expr()

code

# To update the function itself, the function name is always the first element:
code[[1]] <- quote(purrr::map_dbl)   # or expr()

code

# Change the value provided to the first argument (the object):
code[[".x"]] <- 1:5

code

# Change the value provided to the second argument (the function):
code[[".f"]] <- \(.x) {.x + 1}

code

# Evaluate the updated code: notice that both the function itself and the calculation are changed:
code |> eval()
```


## Parsing and grammar

We’ve talked a lot about expressions and the AST, but not about how expressions are created from code that you type (like `"x + y"`). The process by which a computer language takes a string and constructs an expression is called **parsing**, and is governed by a set of rules known as a **grammar**. In this section, we’ll use `lobstr::ast()` to explore some of the details of R’s grammar, and then show how you can transform back and forth between expressions and strings.


### 18.4.1 Operator precedence

Infix functions introduce two sources of ambiguity. The first source of ambiguity arises from infix functions: what does `1 + 2 * 3` yield? Do you get 9 (i.e. `(1 + 2) * 3)`, or 7 (i.e. `1 + (2 * 3)`)? In other words, which of the two possible parse trees below does R use?

![](../pic/ambig-order.png){fig-align=center width=65%}

Programming languages use conventions called **operator precedence** to resolve this ambiguity. We can use `ast()` to see what R does:

```{r}
ast(1 + 2 * 3)
```

Predicting the precedence of arithmetic operations is usually easy because it’s drilled into you in school and is consistent across the vast majority of programming languages.

Predicting the precedence of other operators is harder. There’s one particularly surprising case in R: `!` has a much lower precedence (i.e. it binds less tightly) than you might expect. This allows you to write useful operations like:

```{r}
ast(!x %in% y)
```

R has over 30 infix operators divided into 18 precedence groups. While the details are described in `?Syntax`, very few people have memorised the complete ordering. If there’s any confusion, use parentheses!

Note the appearance of the parentheses in the AST as a call to the `(` function.


### 18.4.2 Associativity

The second source of ambiguity is introduced by repeated usage of the same infix function. For example, is `1 + 2 + 3` equivalent to `(1 + 2) + 3` or to `1 + (2 + 3)`? This normally doesn’t matter because `x + (y + z) == (x + y) + z`, i.e. addition is associative, but is needed because some S3 classes define + in a non-associative way. For example, ggplot2 overloads + to build up a complex plot from simple pieces; this is non-associative because earlier layers are drawn underneath later layers (i.e. `geom_point() + geom_smooth()` does not yield the same plot as `geom_smooth() + geom_point()`).

In R, most operators are **left-associative**, i.e. the operations on the left are evaluated first:

```{r}
ast(1 + 2 + 3)
```

There are two exceptions: exponentiation and assignment.

```{r}
ast(2^2^3)
```


```{r}
ast(x <- y <- z)
```

### 18.4.3 Parsing and deparsing

Most of the time you type code into the console, and R takes care of turning the characters you’ve typed into an AST. But occasionally you have code stored in a string, and you want to parse it yourself. You can do so using `rlang::parse_expr()`:

```{r}
(x1 <- "y <- x + 10")

is.call(x1)

(x2 <- parse_expr(x1))

is.call(x2)
```

`parse_expr()` always returns a single expression. If you have multiple expression separated by `;` or `\n`, you’ll need to use `rlang::parse_exprs()`. It returns a list of expressions:

```{r}
#| eval: false

x3 <- "a <- 1; a + 1"

parse_exprs(x3)

# The expression can be evaluated:
purrr::map(.x = parse_exprs(x3), .f = \(.x) {
  
  eval(.x)
  
})
```

If you find yourself working with strings containing code very frequently, you should reconsider your process. Read Chapter 19 and consider whether you can generate expressions using quasiquotation more safely.

The base equivalent to `parse_exprs()` is `parse()`. It is a little harder to use because it’s specialised for parsing R code stored in files. You need to supply your string to the text argument and it returns an expression vector (Section 18.6.3). I recommend turning the output into a list:

```{r}
as.list(parse(text = x1))
```

The inverse of parsing is **deparsing**: given an expression, you want the string that would generate it. This happens automatically when you print an expression, and you can get the string with `rlang::expr_text()`:

```{r}
z <- expr(y <- x + 10)

is.call(z)

expr_text(z)
```


Parsing and deparsing are not perfectly symmetric because parsing generates an *abstract* syntax tree. This means [we lose backticks around ordinary names, comments, and whitespace]{style="color:red;"}:

```{r}
cat(expr_text(expr = expr(
  
  # This is my function:
  my_sample <- function(n) {
    
    # This is the nested function:
    sample(x = 1:100, size = n)
    
  }
)))
```

Be careful when using the base R equivalent, `deparse()`: it returns a character vector with one element for each line. Whenever you use it, remember that the length of the output might be greater than one, and plan accordingly.

```{r}
deparse(expr = expr(
  # This is my function:
  my_sample <- function(n) {
    
    # This is the nested function:
    sample(x = 1:100, size = n)
    
  }
))
```


### 18.4.4 Exercises

1. R uses parentheses in two slightly different ways as illustrated by these two calls:

```{r}
#| eval: false
f((1))
`(`(1 + 1)
```

Compare and contrast the two uses by referencing the AST.

```{r}
ast(f((1)))

ast(`(`(1 + 1))
```

```{r}
ast(((1 + 1)))
```


2. `=` can also be used in two ways. Construct a simple example that shows both uses.

A: `=` is used both for assignment, and for naming arguments in function calls:

```{r}
# This will work differently (b and c have the same value of 1):
b = c = 1

b

# This will work as planned (b is the name of the name vector with length of 1 and name of `c`):
b = c(c = 1)


b
```

So, when we play with `ast()`, we can directly see that `ast(b = c(c = 1))` is not possible: We get an error because `b =` makes R looking for an argument called `b`. Since `x` is the only argument of `ast()`, we get an error.

```{r}
ast({b = c(c = 1)})
```

When we ignore the braces and compare the trees, we can see that the first `=` is used for assignment and the second `=` is part of the syntax of function calls.



3. Does `-2^2` yield `4` or `-4`? Why?

It yields `-4`, because `^` has a higher operator precedence than `-`, which we can verify by looking at the AST:

```{r}
-2^2

ast(-2^2)
```

4. What does `!1 + !1` return? Why?

```{r}
!1 + !1

ast(!1 + !1)
```

The right `!1` is evaluated first. It evaluates to `FALSE`, because R coerces every non 0 numeric to `TRUE`, when a logical operator is applied. The negation of `TRUE` then equals `FALSE`.

Next `1 + FALSE` is evaluated to `1`, since `FALSE` is coerced to 0.

Finally `!1` is evaluated to `FALSE`.

Note that if `!` had a higher precedence, the intermediate result would be `FALSE + FALSE`, which would evaluate to `0`.


5. Why does `x1 <- x2 <- x3 <- 0` work? Describe the two reasons.

```{r}

ast(x1 <- x2 <- x3 <- 0)

```

One reason is that <- is right-associative, i.e. evaluation takes place from right to left: `x1 <- (x2 <- (x3 <- 0))` The other reason is that `<-` invisibly returns the value on the right-hand side. `(x3 <- 0)`


6. Compare the ASTs of `x + y %+% z` and `x ^ y %+% z`. What have you learned about the precedence of custom infix functions?

```{r}
ast(x + y %+% z)

ast(x ^ y %+% z)
```

7. What happens if you call `parse_expr()` with a string that generates multiple expressions, e.g. `parse_expr("x + 1; y + 1")`?

In this case `parse_expr()` notices that more than one expression would have to be generated and throws an error. You should use `parse_exprs()` for multiple expressions:

```{r}
parse_exprs("x + 1; y + 1")
```

8. What happens if you attempt to parse an invalid expression, e.g. `"a +"` or `"f())"`?

Invalid expressions will lead to an error in the underlying `parse()` function.

```{r}
#| eval: false

parse_expr("a + ")

parse_expr("f(())")

parse(text = "a + ")

parse(text = "f(())")

```


9. `deparse()` produces vectors when the input is long. For example, the following call produces a vector of length two:


```{r}
expr <- expr(g(a + b + c + d + e + f + g + h + i + j + k + l + m + 
                 n + o + p + q + r + s + t + u + v + w + x + y + z))

deparse(expr)

# One string:
expr_deparse(expr)

# One string with \n:
expr_text(expr)

```

10. 

```{r}
# Output since R 4.0.0
d <- 1
pairwise.t.test(2, d + d + d + d + d + d + d + d + 
                  d + d + d + d + d + d + d + d + d)
```


## Walking AST with recursive functions

To conclude the chapter I’m going to use everything you’ve learned about ASTs to solve more complicated problems. The inspiration comes from the base codetools package, which provides two interesting functions:

- `findGlobals()` locates all global variables used by a function. This can be useful if you want to check that your function doesn’t inadvertently rely on variables defined in their parent environment.

- `checkUsage()` checks for a range of common problems including unused local variables, unused parameters, and the use of partial argument matching.


Getting all of the details of these functions correct is fiddly, so we won’t fully develop the ideas. Instead we’ll focus on the big underlying idea: recursion on the AST. Recursive functions are a natural fit to tree-like data structures because a recursive function is made up of two parts that correspond to the two parts of the tree:


- The **recursive case** handles the nodes in the tree. Typically, you’ll do something to each child of a node, usually calling the recursive function again, and then combine the results back together again. For expressions, you’ll need to handle calls and pairlists (function arguments).

- The **base case** handles the leaves of the tree. The base cases ensure that the function eventually terminates, by solving the simplest cases directly. For expressions, you need to handle symbols and constants in the base case.


To make this pattern easier to see, we’ll need two helper functions. First we define `expr_type()` which will return “constant” for constant, “symbol” for symbols, “call”, for calls, “pairlist” for pairlists, and the “type” of anything else:

```{r}
expr_type <- function(x) {
  if (rlang::is_syntactic_literal(x)) {
    "constant"
  } else if (is.symbol(x)) {
    "symbol"
  } else if (is.call(x)) {
    "call"
  } else if (is.pairlist(x)) {
    "pairlist"
  } else {
    typeof(x)
  }
}

expr_type(expr("a"))

expr_type(expr(x))

expr_type(expr(f(1, 2)))

```









