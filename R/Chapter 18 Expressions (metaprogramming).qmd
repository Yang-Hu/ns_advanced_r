---
title: "Chapter 18 Expressions (metaprogramming)"
author: "Yang Hu"
format: 
    html:
      self-contained: true
      embed-resources: true

number-sections: false
code-annotations: hover
    
toc: true
toc-title: "Contents"
toc-location: "left"
toc-depth: 4

execute: 
  freeze: auto
  warning: true
---

## Introduction

To compute on the language, we first need to understand its structure. **That requires some new vocabulary, some new tools, and some new ways of thinking about R code.**

The first of these is the distinction between an operation and its result. Take the following code, which multiplies a variable `x` by 10 and saves the result to a new variable called `y`. It doesn’t work because we haven’t defined a variable called `x`:

```{r}
#| eval: false

y <- x  * 10
```

It would be nice if we could **capture the intent of the code without executing it**. In other words, **how can we separate our description of the action from the action itself**?

One way is to use `rlang::expr()`:

```{r}
z <- rlang::expr(y <- x * 10)

typeof(z)
```

`expr()` returns an expression, an object that captures the structure of the code without evaluating it (i.e. running it). If you have an expression, you can evaluate it with `base::eval()`:

```{r}
x <- 1

eval(z)
```

The focus of this chapter is the data structures that underlie expressions. Mastering this knowledge will allow you to inspect and modify captured code, and to generate code with code. We’ll come back to `expr()` in Chapter 19, and to `eval()` in Chapter 20.


```{r}
library(rlang)
library(lobstr)
```


## Abstract syntax trees

Expressions are also called **abstract syntax trees** (ASTs 抽象语法树) because the structure of code is hierarchical and can be naturally represented as a tree. **Understanding this tree structure is crucial for inspecting and modifying expressions (i.e. metaprogramming).**


### Drawing

We’ll start by introducing some conventions for drawing ASTs, beginning with a simple call that shows their main components: f(x, "y", 1). I’ll draw trees in two ways:

- By "hand" (i.e. with OmniGraffle):

![](../pic/simple.png){fig-align=center width=65%}

<!-- Note how to find the picture if the .qmd file is in a sub folder -->



- With `lobstr::ast()`:

```{r}
expr(f(x, "y", 1)) |> lobstr::ast()

# or:
lobstr::ast(f(x, "y", 1))
```

Both approaches share conventions as much as possible:

- The leaves of the tree are either **symbols**, like `f` and `x`, or **constants**, like `1` or `"y"`. Symbols are drawn in purple and have rounded corners. Constants have black borders and square corners. Strings and symbols are easily confused, so strings are always surrounded in quotes.

- The branches of the tree are call objects, which represent function calls, and are drawn as orange rectangles. The first child (`f`) is the function that gets called; the second and subsequent children (`x`, `"y"`, and `1`) are the arguments to that function.

Colours will be shown when you call `ast()`, but do not appear in the book for complicated technical reasons.

The above example only contained one function call, making for a very shallow tree. Most expressions will contain considerably more calls, creating trees with multiple levels. For example, consider the AST for `f(g(1, 2), h(3, 4, i()))`:


![](pic/complicated.png){fig-align=center width=65%}

```{r}
lobstr::ast(f(g(1, 2), h(3, 4, i())))
```

You can read the hand-drawn diagrams from left-to-right (ignoring vertical position), and the lobstr-drawn diagrams from top-to-bottom (ignoring horizontal position). The depth within the tree is determined by the nesting of function calls. This also determines evaluation order, as evaluation generally proceeds from deepest-to-shallowest, but this is not guaranteed because of lazy evaluation (Section 6.5). Also note the appearance of `i()`, a function call with no arguments; it’s a branch with a single (symbol) leaf.


### Non-code components

You might have wondered what makes these *abstract syntax trees*. They are abstract because they only capture important structural details of the code, not whitespace or comments:

```{r}
ast(
  # Hey!
  f(x, y)
  )
```

There’s only one place where white space affects the AST:

```{r}
lobstr::ast(y -> x)

lobstr::ast(y <- x)

lobstr::ast(y < -x)
```


### Infix calls 

Every call in R can be written in tree form because any call can be written in prefix form (Section 6.8.1). Take `y <- x * 10` again: what are the functions that are being called? It is not as easy to spot as `f(x, 1)` because this expression contains two infix calls: `<-` and `*`. That means that these two lines of code are equivalent:

```{r}
y <- x * 10

# equal to:
`<-`(y, `*`(x, 10))

ast(y <- x * 10)

# And the AST is equal to:
ast(`<-`(y, `*`(x, 10)))
```

There really is no difference between the ASTs, and if you generate an expression with prefix calls, R will still print it in infix form:

```{r}
expr(`<-`(y, `*`(x, 10)))  # !!!

```

The order in which infix operators are applied is governed by a set of rules called operator precedence (运算符优先级), and we’ll use `lobstr::ast()` to explore them in Section 18.4.1.


### 18.2.4 Exercises

```{r}
ast(f(g(h())))

ast(+`+`(1, 2))  

ast(`+`(`+`(1, 2), 3)) 

# or
ast(1 + 2 + 3)

ast((x + y) * z)
```

```{r}
ast(f(g(h(i(1, 2, 3)))))
```

```{r}
ast(f(1, g(2, h(3, i()))))
```

```{r}
ast(f(g(1, 2), h(3, i(4, 5))))
```

```{r}
ast(
  if (FALSE) {
    1
  } else if (FALSE) {
    2
  } else if (TRUE) {
    3
  }
)
```
The AST of nested else if statements might look a bit confusing because it contains multiple curly braces. However, we can see that in the else part of the AST just another expression is being evaluated, which happens to be an if statement and so forth.


## Expressions

Collectively, the data structures present in the AST are called expressions. An **expression** is any member of the set of base types created by parsing code: constant scalars, symbols, call objects, and pairlists. These are the data structures used to represent captured code from `expr()`, and `is_expression(expr(...))` is always true.

Constants, symbols and call objects are the most important, and are discussed below. Pairlists and empty symbols are more specialised and we’ll come back to them in Sections 18.6.1 and Section 18.6.2.

NB: In base R documentation “expression” is used to mean two things. As well as the definition above, expression is also used to refer to the type of object returned by expression() and parse(), which are basically lists of expressions as defined above. In this book I’ll call these **expression vectors**, and I’ll come back to them in Section 18.6.3.


### Constants

Scalar constants are the simplest component of the AST. More precisely, a **constant** is either `NULL` or a length-1 atomic vector (or scalar, Section 3.2.1) like `TRUE`, `1L`, `2.5` or `"x"`. You can test for a constant with `rlang::is_syntactic_literal()`.

```{r}
for_test <- list(TRUE, 1L, 2.5, "x")

purrr::map(for_test, \(.x){is_syntactic_literal(.x)})
```

Constants are self-quoting in the sense that the expression used to represent a constant is the same constant:

```{r}
identical(expr(TRUE), TRUE)

identical(expr(1), 1)

identical(expr(2L), 2L)

identical(expr("x"), "x")


# or:
purrr::map(for_test, \(.x){
  identical(expr(!!.x), .x)
})
```


### Symbols

A **symbol** represents the name of an object like `x`, `mtcars`, or `mean`. In base R, the terms symbol and name are used interchangeably (i.e. `is.name()` is identical to `is.symbol()`), but in this book I used symbol consistently because “name” has many other meanings.

You can create a symbol in two ways: by capturing code that references an object with `expr()`, or turning a string into a symbol with `rlang::sym()`:

```{r}
expr(x)

sym("x")
```

You can turn a symbol back into a string with `as.character()` or `rlang::as_string()`. `as_string()` has the advantage of clearly signalling that you’ll get a character vector of length 1.

```{r}
as_string(expr(x))
```

You can recognise a symbol because it’s printed without quotes, `str()` tells you that it’s a symbol, and `is.symbol()` is `TRUE`:

```{r}
str(expr(x))

is.symbol(expr(x))
```

The symbol type is not vectorised, i.e. a symbol is always length 1. If you want multiple symbols, you’ll need to put them in a list, using (e.g.) `rlang::syms()`.



### Calls

A **call** object represents a captured function call. Call objects are a special type of list where the first component specifies the function to call (usually a symbol), and the remaining elements are the arguments for that call. Call objects create branches in the AST, because calls can be nested inside other calls.

You can identify a call object when printed because it looks just like a function call. Confusingly `typeof()` and `str()` print “language” for call objects, but `is.call()` returns `TRUE`:

```{r}
#| eval: false

ast(read.table(file = "important.csv", row.names = FALSE))

x <- expr(read.table(file = "important.csv", row.names = FALSE))

typeof(x)

is.call(x)

call_standardise(x)

call_match(x, x())
```

### Subsetting

**Calls generally behave like lists**, i.e. you can use standard subsetting tools. The first element of the call object is the function to call, which is usually a symbol:

```{r}
str(x)

x[[1]]

is.symbol(x[[1]])

# Arguments:
names(x)

# Elements (the first is the function to call, the rest are values for arguments):
lapply(1:length(x), \(.x) {x[[.x]]})

```

The remainder of the elements are the arguments:

```{r}
#| eval: false

as.list(x[-1])

```

You can extract individual arguments with `[[` or, if named, `$`:

```{r}
#| eval: false

x[[2]]

x$row.names
```

You can determine the number of arguments in a call object by subtracting 1 from its length:

```{r}
length(x) - 1


x <- expr(sum(1, 2, 3))

y <- expr(expr(sum(1, 2, 3))) 


x;y

length(x);length(y)

# The second `expr` is a list:
y[[2]][[1]]
```

Extracting specific arguments from calls is challenging because of R’s flexible rules for argument matching: it could potentially be in any location, with the full name, with an abbreviated name, or with no name. To work around this problem, you can use `rlang::call_standardise()` which standardises all arguments to use the full name:

```{r}
#| eval: false

x <- expr(mean(c(1, 2, 3), na.rm = TRUE))

eval(x)

call_standardise(x)

call_match(x(), x)


sample(x = 1:5, size = 3, replace = FALSE)


# Save the minimum function as expression:
x <- expr(sample(1:5, 3, FALSE))

# Standardises all arguments to use the full name:
call_standardise(x)

```


Look back, you have learnt a lot in 2023: Packages, Quarto document and slides, even got attention from RBNZ and MfE! Like Ollie said, you should be proud of yourself. Take some time off and have a good time with Lara and Eric(Fu). See you in 2024! :)

Hi! Thank you. I am back :). Today is 2024-05-07, it's been a while! We had a great trip to China and Japan. Shortly after I retuned, I had attend an R Shiny class, and I will be presenting at the R exchange 2024 in two days, wish me luck. 


Recall: **Calls can be modified in the same way as lists:**, can a list be transformed to a function call then?

```{r}
x <- list(x = 1:10, size = 5, replace = TRUE)

# ! Yes you can! do.call constructs and executes a function call from a name or a function and a list of arguments to be passed to it.
do.call(what = "sample", args = x)

# By position:
x <- list(1:10, 5, TRUE)

# It also works:
do.call(what = "sample", args = x)

# Add a new argument:
x <- list(x = 1:10, size = 5, replace = TRUE)

x[["prob"]] <- c(1, rep(0, times = 9))  # Give 1 the whole weight, the rest of 0 weight

# Yep, it works as expected:
do.call(what = "sample", args = x)
```





