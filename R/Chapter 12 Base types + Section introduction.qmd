---
title: "Chapter 12 Base types + Section introduction"
author: "Yang Hu"
format: 
    html:
      self-contained: true
      embed-resources: true

number-sections: false
code-annotations: hover
    
toc: true
toc-title: "Contents"
toc-location: "left"
toc-depth: 4

execute: 
  freeze: auto
  warning: true
---


# Introduction

In the following five chapters you’ll learn about **object-oriented programming** (OOP). OOP is a little more challenging in R than in other languages because:

- There are multiple OOP systems to choose from. In this book, I’ll focus on the three that I believe are most important: **S3**, **R6**, and **S4**. S3 and S4 are provided by base R. R6 is provided by the R6 package, and is similar to the **Reference Classes**, or **RC** for short, from base R.

- There is disagreement about the relative importance of the OOP systems. I think S3 is most important, followed by R6, then S4. Others believe that S4 is most important, followed by RC, and that S3 should be avoided. This means that different R communities use different systems.


Generally in R, functional programming is much more important than object-oriented programming, because you typically solve complex problems by decomposing them into simple functions, not simple objects. Nevertheless, there are important reasons to learn each of the three systems:

- S3 allows your functions to return rich results with user-friendly display and programmer-friendly internals. S3 is used throughout base R, so it’s important to master if you want to extend base R functions to work with new types of input.

- R6 provides a standardised way to escape R’s copy-on-modify semantics. This is particularly important if you want to model objects that exist independently of R. Today, a common need for R6 is to model data that comes from a web API, and where changes come from inside or outside of R.

- S4 is a rigorous system that forces you to think carefully about program design. It’s particularly well-suited for building large systems that evolve over time and will receive contributions from many programmers. This is why it is used by the Bioconductor project, so another reason to learn S4 is to equip you to contribute to that project.

This book focusses on the mechanics of OOP, not its effective use, and it may be challenging to fully understand if you have not done object-oriented programming before. You might wonder why I chose not to provide more immediately useful coverage. I have focused on mechanics here because they need to be well described somewhere (writing these chapters required a considerable amount of reading, exploration, and synthesis on my behalf), and using OOP effectively is sufficiently complex to require a book-length treatment; there’s simply not enough room in Advanced R to cover it in the depth required.


## OOP systems

Different people use OOP terms in different ways, so this section provides a quick overview of important vocabulary. The explanations are necessarily compressed, but we will come back to these ideas multiple times.

The main reason to use OOP is **polymorphism** (literally: many shapes). Polymorphism means that a developer can consider a function’s interface separately from its implementation, making it possible to use the same function form for different types of input. This is closely related to the idea of **encapsulation**: the user doesn’t need to worry about details of an object because they are encapsulated behind a standard interface.

To be concrete, polymorphism is what allows `summary()` to produce different outputs for numeric and factor variables:

```{r}
diamonds <- ggplot2::diamonds

summary(diamonds$carat)

summary(diamonds$cut)
```

You could imagine `summary()` containing a series of if-else statements, but that would mean only the original author could add new implementations. An OOP system makes it possible for any developer to extend the interface with implementations for new types of input.

To be more precise, OO systems call the type of an object its **class**, and an implementation for a specific class is called a **method**. Roughly speaking, a class defines what an object is and methods describe what that object can do. The class defines the **fields**, the data possessed by every instance of that class. Classes are organised in a hierarchy so that if a method does not exist for one class, its parent’s method is used, and the child is said to **inherit** behaviour. For example, in R, an ordered factor inherits from a regular factor, and a generalised linear model inherits from a linear model. The process of finding the correct method given a class is called **method dispatch**.


There are two main paradigms of object-oriented programming which differ in how methods and classes are related. In this book, we’ll borrow the terminology of Extending R and call these paradigms encapsulated and functional:

- In **encapsulated** OOP, methods belong to objects or classes, and method calls typically look like `object.method(arg1, arg2)`. This is called encapsulated because the object encapsulates both data (with fields) and behaviour (with methods), and is the paradigm found in most popular languages.

- In **functional** OOP, methods belong to **generic** functions, and method calls look like ordinary function calls: `generic(object, arg2, arg3)`. This is called functional because from the outside it looks like a regular function call, and internally the components are also functions.

With this terminology in hand, we can now talk precisely about the different OO systems available in R.


## OOP in R

Base R provides three OOP systems: S3, S4, and reference classes (RC):

- **S3** is R’s first OOP system, and is described in Statistical Models in S.62 S3 is an informal implementation of functional OOP and relies on common conventions rather than ironclad guarantees. This makes it easy to get started with, providing a low cost way of solving many simple problems.

- **S4** is a formal and rigorous rewrite of S3, and was introduced in Programming with Data. It requires more upfront work than S3, but in return provides more guarantees and greater encapsulation. S4 is implemented in the base **methods** package, which is always installed with R.

(You might wonder if S1 and S2 exist. They don’t: S3 and S4 were named according to the versions of S that they accompanied. The first two versions of S didn’t have any OOP framework.)


- **RC** implements encapsulated OO. RC objects are a special type of S4 objects that are also **mutable**, i.e., instead of using R’s usual copy-on-modify semantics, they can be modified in place. This makes them harder to reason about, but allows them to solve problems that are difficult to solve in the functional OOP style of S3 and S4.

A number of other OOP systems are provided by CRAN packages:

- **R6** implements encapsulated OOP like RC, but resolves some important issues. In this book, you’ll learn about R6 instead of RC, for reasons described in Section 14.5.

- **R.oo** provides some formalism on top of S3, and makes it possible to have mutable S3 objects.

- **proto** implements another style of OOP based on the idea of **prototypes**, which blur the distinctions between classes and instances of classes (objects). I was briefly enamoured with prototype based programming67 and used it in ggplot2, but now think it’s better to stick with the standard forms.

Apart from R6, which is widely used, these systems are primarily of theoretical interest. They do have their strengths, but few R users know and understand them, so it is hard for others to read and contribute to your code.


## Sloop

Before we go on I want to introduce the sloop package:

```{r}
library(sloop)
```

The sloop package (think “sail the seas of OOP”) provides a number of helpers that fill in missing pieces in base R. The first of these is `sloop::otype()`. It makes it easy to figure out the OOP system used by a wild-caught object:

```{r}
otype(1:10)

otype(mtcars)

mle_obj <- stats4::mle(function(x = 1) (x - 2) ^ 2)

otype(mle_obj)
```

Use this function to figure out which chapter to read to understand how to work with an existing object.



# Base types (Chapter 12 starts from here)

## Introduction

To talk about objects and OOP in R we first need to clear up a fundamental confusion about two uses of the word “object”. So far in this book, we’ve used the word in the general sense captured by John Chambers’ pithy quote: “Everything that exists in R is an object”. **However, while everything is an object, not everything is object-oriented. This confusion arises because the base objects come from S, and were developed before anyone thought that S might need an OOP system.** The tools and nomenclature evolved organically over many years without a single guiding principle.

Most of the time, the distinction between objects and object-oriented objects is not important. But here we need to get into the nitty gritty details so we’ll use the terms **base objects** and **OO objects** to distinguish them.

![](pic/oo-venn.png){fig-align=center width=65%}


### Base versus OO objects

To tell the difference between a base and OO object, use `is.object()` or `sloop::otype()`:

```{r}
# A base object:
x <- "Yang"

is.object(x)

sloop::otype(x)


# An OO object:
is.object(mtcars)

sloop::otype(mtcars)
```

Technically, the difference between base and OO objects is that OO objects have a “class” attribute:

```{r}
attr(1:10, "class")

attr(mtcars, "class")
```

You may already be familiar with the `class()` function. This function is safe to apply to S3 and S4 objects, but it returns misleading results when applied to base objects. It’s safer to use `sloop::s3_class()`, which returns the implicit class that the S3 and S4 systems will use to pick methods. You’ll learn more about `s3_class()` in Section 13.7.1.

```{r}
x <- matrix(data = 1:4, nrow = 2)

x

class(x)

sloop::s3_class(x)
```


## Base types

While only OO objects have a class attribute, every object has a **base type**:

```{r}
typeof(1:10)

typeof(mtcars)

typeof(updatefi::get_econ_fi)
```

Base types do not form an OOP system because functions that behave differently for different base types are primarily written in C code that uses switch statements. This means that only R-core can create new types, and creating a new type is a lot of work because every switch statement needs to be modified to handle a new case. As a consequence, new base types are rarely added. The most recent change, in 2011, added two exotic types that you never see in R itself, but are needed for diagnosing memory problems. Prior to that, the last type added was a special base type for S4 objects added in 2005.

In total, there are 25 different base types. They are listed below, loosely grouped according to where they’re discussed in this book. These types are most important in C code, so you’ll often see them called by their C type names. I’ve included those in parentheses.

- Vectors, Chapter 3, include types `NULL` (`NILSXP`), `logical` (`LGLSXP`), `integer` (`INTSXP`), `double` (`REALSXP`), `complex` (`CPLXSXP`), `character` (`STRSXP`), `list` (`VECSXP`), and `raw` (`RAWSXP`).

```{r}
typeof(NULL)

typeof(1L)

typeof(1i)
```

- Functions, Chapter 6, include types `closure` (regular R functions, `CLOSXP`), `special` (internal functions, `SPECIALSXP`), and `builtin` (primitive functions, `BUILTINSXP`).

```{r}
typeof(mean)

typeof(`[`)

typeof(sum)
```

Internal and primitive functions are described in Section 6.2.2.

- Environments, Chapter 7, have type environment (`ENVSXP`).

```{r}
typeof(globalenv())
```

- The S4 type (`S4SXP`), Chapter 15, is used for S4 classes that don’t inherit from an existing base type.

```{r}
mle_obj <- stats4::mle(function(x = 1) (x - 2) ^ 2)
typeof(mle_obj)
```

- Language components, Chapter 18, include `symbol` (aka name, `SYMSXP`), `language` (usually called calls, `LANGSXP`), and `pairlist` (used for function arguments, `LISTSXP`) types.

```{r}
typeof(quote(a))

typeof(quote(a + 1))

typeof(formals(mean))
```

`expression` (`EXPRSXP`) is a special purpose type that’s only returned by `parse()` and `expression()`. Expressions are generally not needed in user code.

- The remaining types are esoteric and rarely seen in R. They are important primarily for C code: `externalptr` (`EXTPTRSXP`), `weakref` (`WEAKREFSXP`), `bytecode` (`BCODESXP`), `promise` (`PROMSXP`), `...` (`DOTSXP`), and `any` (`ANYSXP`).

You may have heard of `mode()` and `storage.mode()`. Do not use these functions: they exist only to provide type names that are compatible with S.


### Numeric type

Be careful when talking about the numeric type, because R uses “numeric” to mean three slightly different things:

1. In some places numeric is used as an alias for the double type. For example `as.numeric()` is identical to `as.double()`, and `numeric()` is identical to `double()`.

(R also occasionally uses real instead of double; NA_real_ is the one place that you’re likely to encounter this in practice.)

2. In the S3 and S4 systems, numeric is used as a shorthand for either integer or double type, and is used when picking methods:

```{r}
sloop::s3_class(1)

sloop::s3_class(1L)
```

`is.numeric()` tests for objects that *behave* like numbers. For example, factors have type “integer” but don’t behave like numbers (i.e. it doesn’t make sense to take the mean of factor).

```{r}
typeof(factor("x"))

is.numeric(factor("x"))
```

In this book, I consistently use numeric to mean an object of type integer or double.







































